[
	{
		"kind": "module",
		"file": "source/atmosphere/catmosphere.d",
		"members": [
			{
				"kind": "function",
				"line": 55,
				"deco": "UxPUNbNimxPdPdZvxPdmmmPdPdPdPdPdPdxPUNbNiddZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xPUNbNimxPdPdZv",
						"name": "grad"
					},
					{
						"deco": "xPd",
						"name": "WTptr"
					},
					{
						"deco": "m",
						"name": "k"
					},
					{
						"deco": "m",
						"name": "n"
					},
					{
						"deco": "m",
						"name": "WTshift"
					},
					{
						"deco": "Pd",
						"name": "p"
					},
					{
						"deco": "Pd",
						"name": "mixture"
					},
					{
						"deco": "Pd",
						"name": "pi"
					},
					{
						"deco": "Pd",
						"name": "xi"
					},
					{
						"deco": "Pd",
						"name": "gamma"
					},
					{
						"deco": "Pd",
						"name": "c"
					},
					{
						"deco": "xPUNbNiddZb",
						"name": "tolerance"
					}
				],
				"name": "catmosphere_gradientDescentIteration",
				"comment": "One iteration of gradient descent optimization algorithm.\nParams:\n\tgrad = ∇u(ω)\n\tWTptr = transposed version of W.\n\tk = number of rows.\n\tn = number of columns.\n\tWTshift = count of elements between adjacent rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = Wp, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\tc = temporary array, length = k.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"originalType": "extern (C) void(in extern (C) void function(size_t, in double*, double*) nothrow @nogc grad, in double* WTptr, size_t k, size_t n, size_t WTshift, double* p, double* mixture, double* pi, double* xi, double* gamma, double* c, in extern (C) bool function(double, double) nothrow @nogc tolerance)",
				"endline": 82
			},
			{
				"kind": "function",
				"line": 105,
				"deco": "UxPUNbNimxPdPdZvxPdmmmPdPdPdPdPdxPUNbNiddZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xPUNbNimxPdPdZv",
						"name": "grad"
					},
					{
						"deco": "xPd",
						"name": "WTptr"
					},
					{
						"deco": "m",
						"name": "k"
					},
					{
						"deco": "m",
						"name": "n"
					},
					{
						"deco": "m",
						"name": "WTshift"
					},
					{
						"deco": "Pd",
						"name": "p"
					},
					{
						"deco": "Pd",
						"name": "mixture"
					},
					{
						"deco": "Pd",
						"name": "pi"
					},
					{
						"deco": "Pd",
						"name": "xi"
					},
					{
						"deco": "Pd",
						"name": "gamma"
					},
					{
						"deco": "xPUNbNiddZb",
						"name": "tolerance"
					}
				],
				"name": "catmosphere_coordinateDescentIteration",
				"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WT rows and corresponding elements of p.\nSimilar rows (in context of u) of WT should be held far from each other.\nParams:\n\tgrad = ∇u(ω)\n\tWTptr = transposed version of W.\n\tk = number of rows.\n\tn = number of columns.\n\tWTshift = count of elements between adjacent rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = Wp, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"originalType": "extern (C) void(in extern (C) void function(size_t, in double*, double*) nothrow @nogc grad, in double* WTptr, size_t k, size_t n, size_t WTshift, double* p, double* mixture, double* pi, double* xi, double* gamma, in extern (C) bool function(double, double) nothrow @nogc tolerance)",
				"endline": 130
			},
			{
				"kind": "function",
				"line": 151,
				"deco": "UxPUNbNidZdxPdmmmPdPdPdxPUNbNiddZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xPUNbNidZd",
						"name": "simpleGrad"
					},
					{
						"deco": "xPd",
						"name": "WTptr"
					},
					{
						"deco": "m",
						"name": "k"
					},
					{
						"deco": "m",
						"name": "n"
					},
					{
						"deco": "m",
						"name": "WTshift"
					},
					{
						"deco": "Pd",
						"name": "p"
					},
					{
						"deco": "Pd",
						"name": "mixture"
					},
					{
						"deco": "Pd",
						"name": "pi"
					},
					{
						"deco": "xPUNbNiddZb",
						"name": "tolerance"
					}
				],
				"name": "catmosphere_coordinateDescentIterationPartial",
				"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WT rows and corresponding elements of p.\nSimilar rows (in context of u) of WT should be held far from each other.\nParams:\n\tsimpleGrad = du/dω_1, where du/dω_j = du/dω_1, 1 <= j <= n.\n\tWTptr = transposed version of W.\n\tk = number of rows.\n\tn = number of columns.\n\tWTshift = count of elements between adjacent rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = Wp, length = n.\n\tpi = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"originalType": "extern (C) void(in extern (C) double function(double) nothrow @nogc simpleGrad, in double* WTptr, size_t k, size_t n, size_t WTshift, double* p, double* mixture, double* pi, in extern (C) bool function(double, double) nothrow @nogc tolerance)",
				"endline": 172
			},
			{
				"kind": "function",
				"line": 195,
				"deco": "UxPdmmmPdPdPdxPUNbNiddZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xPd",
						"name": "WTptr"
					},
					{
						"deco": "m",
						"name": "k"
					},
					{
						"deco": "m",
						"name": "n"
					},
					{
						"deco": "m",
						"name": "WTshift"
					},
					{
						"deco": "Pd",
						"name": "p"
					},
					{
						"deco": "Pd",
						"name": "mixture"
					},
					{
						"deco": "Pd",
						"name": "pi"
					},
					{
						"deco": "xPUNbNiddZb",
						"name": "tolerance"
					}
				],
				"name": "catmosphere_coordinateDescentIterationPartial_minusSumOfLogs",
				"comment": "k iterations of coordinate descent optimization algorithm.\n-----------\nu(ω_1, ..., ω_n) = -Σ_j log(ω_j),\ndu/dω_j, where du/dω_j = -1/ω_j, 1 <= j <= n.\n-----------\nFor better performance permute rows of WT rows and corresponding elements of p.\nSimilar rows (in context of u) of WT should be held far from each other.\nParams:\n\tWTptr = transposed version of W.\n\tk = number of rows.\n\tn = number of columns.\n\tWTshift = count of elements between adjacent rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = Wp, length = n.\n\tpi = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"originalType": "extern (C) void(in double* WTptr, size_t k, size_t n, size_t WTshift, double* p, double* mixture, double* pi, in extern (C) bool function(double, double) nothrow @nogc tolerance)",
				"endline": 215
			}
		],
		"name": "atmosphere.catmosphere",
		"comment": "Extern C bindings.\n"
	},
	{
		"kind": "module",
		"file": "source/atmosphere/mixture.d",
		"members": [
			{
				"kind": "template",
				"line": 23,
				"members": [
					{
						"kind": "function",
						"line": 23,
						"endchar": 1,
						"char": 6,
						"type": "void(Matrix!(const(T)) WTransposed, in T[] p, T[] mixture)",
						"parameters": [
							{
								"type": "Matrix!(const(T))",
								"name": "WTransposed"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "p"
							},
							{
								"type": "T[]",
								"name": "mixture"
							}
						],
						"name": "mix",
						"comment": "mixture = Wp\n",
						"endline": 34
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "mixture = Wp\n",
				"name": "mix"
			},
			{
				"kind": "template",
				"line": 51,
				"members": [
					{
						"kind": "function",
						"line": 51,
						"endchar": 1,
						"char": 6,
						"type": "void(Matrix!(const(T)) WTransposed, T[] p, T[] mixture, T[] pi, T[] xi, T[] gamma, T[] c, in bool delegate(T, T) nothrow @nogc tolerance = (a, b) => false)",
						"parameters": [
							{
								"type": "Matrix!(const(T))",
								"name": "WTransposed"
							},
							{
								"type": "T[]",
								"name": "p"
							},
							{
								"type": "T[]",
								"name": "mixture"
							},
							{
								"type": "T[]",
								"name": "pi"
							},
							{
								"type": "T[]",
								"name": "xi"
							},
							{
								"type": "T[]",
								"name": "gamma"
							},
							{
								"type": "T[]",
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "",
								"type": "bool delegate(T, T) nothrow @nogc",
								"name": "tolerance"
							}
						],
						"name": "gradientDescentIteration",
						"comment": "One iteration of gradient descent optimization algorithm.\nParams:\n\tgrad = ∇u(ω)\n\tWTransposed = transposed version of W. k rows, n columns.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\tc = temporary array, length = k.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
						"endline": 87
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "grad"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "One iteration of gradient descent optimization algorithm.\nParams:\n\tgrad = ∇u(ω)\n\tWTransposed = transposed version of W. k rows, n columns.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\tc = temporary array, length = k.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"name": "gradientDescentIteration"
			},
			{
				"kind": "template",
				"line": 107,
				"members": [
					{
						"kind": "function",
						"line": 107,
						"endchar": 1,
						"char": 6,
						"type": "void(Matrix!(const(T)) WTransposed, T[] p, T[] mixture, T[] pi, T[] xi, T[] gamma, in bool delegate(T, T) nothrow @nogc tolerance = (a, b) => false)",
						"parameters": [
							{
								"type": "Matrix!(const(T))",
								"name": "WTransposed"
							},
							{
								"type": "T[]",
								"name": "p"
							},
							{
								"type": "T[]",
								"name": "mixture"
							},
							{
								"type": "T[]",
								"name": "pi"
							},
							{
								"type": "T[]",
								"name": "xi"
							},
							{
								"type": "T[]",
								"name": "gamma"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "",
								"type": "bool delegate(T, T) nothrow @nogc",
								"name": "tolerance"
							}
						],
						"name": "coordinateDescentIteration",
						"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WTransposed rows and corresponding elements of p.\nSimilar rows (in context of u) of WTransposed should be held far from each other.\nParams:\n\tgrad = ∇u(ω)\n\tWTransposed = transposed version of W. n columns, k rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
						"endline": 146
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "grad"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WTransposed rows and corresponding elements of p.\nSimilar rows (in context of u) of WTransposed should be held far from each other.\nParams:\n\tgrad = ∇u(ω)\n\tWTransposed = transposed version of W. n columns, k rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\txi = temporary array, length = n.\n\tgamma = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"name": "coordinateDescentIteration"
			},
			{
				"kind": "template",
				"line": 164,
				"members": [
					{
						"kind": "function",
						"line": 164,
						"endchar": 1,
						"char": 6,
						"type": "void(Matrix!(const(T)) WTransposed, T[] p, T[] mixture, T[] pi, in bool delegate(T, T) nothrow @nogc tolerance = (a, b) => false)",
						"parameters": [
							{
								"type": "Matrix!(const(T))",
								"name": "WTransposed"
							},
							{
								"type": "T[]",
								"name": "p"
							},
							{
								"type": "T[]",
								"name": "mixture"
							},
							{
								"type": "T[]",
								"name": "pi"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "",
								"type": "bool delegate(T, T) nothrow @nogc",
								"name": "tolerance"
							}
						],
						"name": "coordinateDescentIterationPartial",
						"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WTransposed rows and corresponding elements of p.\nSimilar rows (in context of u) of WTransposed should be held far from each other.\nParams:\n\tPartialDerivative = du/dω_1, where du/dω_j = du/dω_1, 1 <= j <= n.\n\tWTransposed = transposed version of W. n columns, k rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
						"endline": 199
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "PartialDerivative"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "k iterations of coordinate descent optimization algorithm.\n\nFor better performance permute rows of WTransposed rows and corresponding elements of p.\nSimilar rows (in context of u) of WTransposed should be held far from each other.\nParams:\n\tPartialDerivative = du/dω_1, where du/dω_j = du/dω_1, 1 <= j <= n.\n\tWTransposed = transposed version of W. n columns, k rows.\n\tp = discrete probability distribution with, length = k.\n\tmixture = temporary array, length = n.\n\tpi = temporary array, length = n.\n\ttolerance = Defines an early termination condition.\n\t\t\t\tReceives the current upper and lower bounds on the root.\n\t\t\t\tThe delegate must return true when these bounds are acceptable.\n",
				"name": "coordinateDescentIterationPartial"
			},
			{
				"kind": "template",
				"line": 481,
				"members": [
					{
						"kind": "alias",
						"line": 481,
						"char": 1,
						"type": "CoordinateDescentPartial!((a) => -1 / a)",
						"name": "CoordinateSumOfLogsMaximization"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "----------\nalias CoordinateSumOfLogsMaximization(T) = CoordinateDescentPartial!(a => -1/a);\n----------\n",
				"name": "CoordinateSumOfLogsMaximization"
			},
			{
				"kind": "template",
				"line": 489,
				"members": [
					{
						"kind": "alias",
						"line": 489,
						"char": 1,
						"type": "GradientDescent!((a, b)\n{\nforeach (i, e; a)\n{\nb[i] = -1 / e;\n}\n}\n)",
						"name": "GradientSumOfLogsMaximization"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "----------\nalias GradientSumOfLogsMaximization(T) = GradientDescent!((a, b) {foreach(i, e; a) b[i] = -1/e;});\n----------\n",
				"name": "GradientSumOfLogsMaximization"
			}
		],
		"name": "atmosphere.mixture",
		"comment": "This module contains numeric methods.\nEach method aims to do one iteration over the task.\n\nOptimization problem f(p) -> min,\nwhere p is discrete probability distribution with k elements.\nf = u(Wp),\nW - matrix(n rows, k columns),\nu - convex function.\n"
	},
	{
		"kind": "module",
		"file": "source/atmosphere/normal_variance_mean_mixture.d",
		"members": [
			{
				"kind": "enum",
				"line": 26,
				"members": [
					{
						"kind": "enum member",
						"line": 31,
						"value": "0",
						"char": 2,
						"name": "GradientDescent",
						"comment": "\tGradient descent optimization algorithm.\n"
					},
					{
						"kind": "enum member",
						"line": 35,
						"value": "1",
						"char": 2,
						"name": "CoordinateDescent",
						"comment": "\tCoordinate descent optimization algorithm.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SNVMMAlgorithm",
				"comment": "Algorithm for saparating normal variance mean mixture.\n"
			},
			{
				"kind": "template",
				"line": 42,
				"members": [
					{
						"kind": "function",
						"line": 42,
						"endchar": 1,
						"char": 19,
						"type": "ElementType!Range(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "sumOfLog2s",
						"comment": "Computes accurate sum of binary logarithms of input range $(D r).\n",
						"endline": 61
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Computes accurate sum of binary logarithms of input range $(D r).\n",
				"name": "sumOfLog2s"
			},
			{
				"kind": "template",
				"line": 66,
				"members": [
					{
						"kind": "function",
						"line": 66,
						"endchar": 1,
						"char": 3,
						"type": "T(in T[] sample, in T[] grid, T[] probability, in bool delegate(T alphaSave, T alpha, in T[] probabilitySave, in T[] probability) nothrow @nogc tolerance, in bool delegate(T, T) nothrow @nogc findRootTolerance = (a, b) => false)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "sample"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "grid"
							},
							{
								"type": "T[]",
								"name": "probability"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "bool delegate(T alphaSave, T alpha, in T[] probabilitySave, in T[] probability) nothrow @nogc",
								"name": "tolerance"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "",
								"type": "bool delegate(T, T) nothrow @nogc",
								"name": "findRootTolerance"
							}
						],
						"name": "separateNormalVarianceMeanMixture",
						"comment": "Separates normal variance mean mixture.\n",
						"endline": 172
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "value",
						"deco": "E10atmosphere28normal_variance_mean_mixture14SNVMMAlgorithm",
						"name": "Algorithm"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Separates normal variance mean mixture.\n",
				"name": "separateNormalVarianceMeanMixture"
			}
		],
		"name": "atmosphere.normal_variance_mean_mixture",
		"comment": "Algorithms for saparating normal variance mean mixture.\n"
	}
]