/**
This module contains permutations generated by fractals.
*/
module atmosphere.fractal;

import std.range;
import std.algorithm;
import std.math;


/**
Memory model: GC

Params:
	m = length of permutation
	shift = left rotation of permutation
Returns:
	permutation generated by fractale
*/
size_t[] createFractale001(size_t length, size_t shift = 0)
{
	if(length == 0) return null;
	size_t d;
	size_t n = 1;
	while(n < length) 
	{
		n<<=1; 
		d++;
	}
	auto perm = new size_t[n];
	scope(exit) perm.destroy;
	foreach(step; 0..d)
	{
		auto a = 1<<step;
		auto b = 1<<(step+1);
		perm[a..b] = perm[0..a]+(1<<(d-(step+1)));
	}
	auto r = new size_t[length];
	scope(exit) r.destroy;
	auto y = new size_t[length];
	foreach(i, ref e; r)
		e = perm[cast(size_t)floor(i*cast(real)n/length)];
	makeIndex(r, y);
	scope(exit) r.destroy;
	if(shift)
	{
		scope(exit) y.destroy;
		return y.cycle.drop(shift).take(length).array;
	}
	else
	{
		return y;
	}
}

